{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "mspr-serverless.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "mspr-serverless.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        {{- include "mspr-serverless.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
    spec:
      containers:
      - name: postgres
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: {{ .Values.postgresql.auth.database | quote }}
        - name: POSTGRES_USER
          value: {{ .Values.postgresql.auth.username | quote }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgresql.auth.password | quote }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          {{- toYaml .Values.postgresql.resources | nindent 10 }}
      {{- if and .Values.monitoring.enabled .Values.monitoring.postgres.exporter.enabled }}
      - name: postgres-exporter
        image: "{{ .Values.monitoring.postgres.exporter.image.repository }}:{{ .Values.monitoring.postgres.exporter.image.tag }}"
        ports:
        - containerPort: {{ .Values.monitoring.postgres.exporter.port }}
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@localhost:5432/{{ .Values.postgresql.auth.database }}?sslmode=disable"
        resources:
          {{- toYaml .Values.monitoring.postgres.exporter.resources | nindent 10 }}
      {{- end }}
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: {{ .Values.namespace }}
  labels:
    app: postgres
    purpose: database-storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.postgresql.persistence.storageClass }}
  resources:
    requests:
      storage: {{ .Values.postgresql.persistence.size | quote }}
  volumeMode: Filesystem
{{- end }}
